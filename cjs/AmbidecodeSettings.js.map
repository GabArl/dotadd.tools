{"version":3,"sources":["../build/AmbidecodeSettings.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","AmbidecodeSettings","shortName","getName","getDescription","container_type","ContainerType","XML","test","obj","hasOwnProperty","parse","filename","carry","opts","add","ADD","ambset","incomplete_results","pop","console","log","setName","type","ParseError","decoder","matrices","setNormalisation","addMatrix","Matrix","output","channels","speaker","map","spk","coords","position","split","OutputChannel","AEDCoord","refitOutputMatrix","createDefaultMetadata","valid","results","push","fromADD"],"mappings":"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","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ContainerType, _static_implements } from \"./ADCFormat\";\nimport { ADD, Matrix, OutputChannel, AEDCoord } from 'dotadd.js';\nimport { ParseError } from './Util';\nlet AmbidecodeSettings = class AmbidecodeSettings {\n    static shortName() {\n        return \"ambidecode_settings\";\n    }\n    static getName() {\n        return \"Ambidecode XML Settings Files\";\n    }\n    static getDescription() {\n        return \"Exported and Imported by the ICST Ambisonics Externals for Max/MSP.\";\n    }\n    static container_type() {\n        return ContainerType.XML;\n    }\n    static test(obj) {\n        return obj.hasOwnProperty(\"ambidecode-settings\");\n    }\n    static parse(obj, filename, carry, opts) {\n        let add = new ADD();\n        let ambset = obj['ambidecode-settings'];\n        if (carry.incomplete_results.length) {\n            add = carry.incomplete_results.pop();\n            console.log('using incomplete result from previous run');\n        }\n        else\n            add.setName(filename);\n        if (!(ambset.type == 'SN3D' || ambset.type == 'N3D'))\n            throw new ParseError(filename, \"Unexpected normalisation: \" + ambset.type);\n        if (add.decoder.matrices.length) {\n            add.decoder.matrices[0].setNormalisation(ambset.type);\n        }\n        else {\n            add.addMatrix(new Matrix(0, ambset.type, []));\n        }\n        add.decoder.output.channels = ambset.speaker.map((spk, i) => {\n            let coords = spk.position['#text'].split(' ');\n            return new OutputChannel(`ambidecode_out_${i}`, 'spk', {\n                coords: new AEDCoord(coords[0], coords[1], coords[2])\n            });\n        });\n        add.refitOutputMatrix();\n        add.createDefaultMetadata();\n        if (add.valid()) {\n            carry.results.push(add);\n        }\n        else {\n            console.log('stashing incomplete result ' + filename);\n            carry.incomplete_results.push(add);\n        }\n    }\n    static fromADD(add) {\n        return \"\";\n    }\n};\nAmbidecodeSettings = __decorate([\n    _static_implements()\n], AmbidecodeSettings);\nexport default AmbidecodeSettings;\n"],"file":"AmbidecodeSettings.js"}