{"version":3,"sources":["../build/AmbdecFormat.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","Ambdec","constructor","normalisation","xover","xover_ratio","hfmtx","lfmtx","mtx","spks","chmask","AmbdecFormat","shortName","getName","getDescription","container_type","ContainerType","AMBDEC","test","obj","parse","file","filename","carry","opts","add","ADD","lines","data","split","ambdec","parser_state","ParserState","COMMANDS","current_matrix","forEach","line","index","trim","charAt","cmd","parseAmbdecCommand","name","setName","value","setVersion","Number","parseInt","parseFloat","SPEAKERS","MATRIX","doParseMatrix","doParseSpeaker","toLowerCase","ParseError","setDescription","addFilter","Filter","makeLowpass","makeHighpass","addMatrix","Matrix","acnmask","toString","map","s","Array","fill","decoder","matrices","mat","matrix","ch","new_ch","nfill","push","shift","spk","addOutput","OutputChannel","coord","numOutputs","output","summing_matrix","totalMatrixOutputs","filters","createDefaultMetadata","valid","results","incomplete_results","fromADD","ambdecRemoveImagSpeakers","pair","ambdecFindXoverPair","dualband","xover_f","h","low","out","str","Date","now","toUTCString","ambdecAppendValue","description","ambdecAppendNewlines","version","adjustMatrixAndGetChannelMask","channels","getNormalization","ambdecAppendSpeakers","ambdecWriteMatrix","l","elems","filter","current_mtx","el","coefs","el_name","crs","AEDCoord","ambdecAppendLine","ambdecSectionEnd","type","mat_begin","order","ACN","order_gain_line","join","num_coeffs","mat_idx","idx","numCoeffs","reduce","arr","cf","new_arr","f","b","coords","a","e","flt","flt2","idx2","isHighpass","isLowpass","high","result","ambdecChannelMaskForOrder","maxChannels","new_chs","new_summing_mtx","is_null"],"mappings":"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","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ADD, Matrix, AEDCoord, Filter, OutputChannel, ACN } from 'dotadd.js';\nimport { _static_implements, ContainerType } from './ADCFormat';\nimport { ParseError } from './Util';\nclass Ambdec {\n    constructor() {\n        this.normalisation = \"\";\n        this.xover = 0;\n        this.xover_ratio = 0;\n        this.hfmtx = [];\n        this.lfmtx = [];\n        this.mtx = [];\n        this.spks = [];\n        this.chmask = \"\";\n    }\n}\nlet AmbdecFormat = class AmbdecFormat {\n    static shortName() {\n        return \"ambdec\";\n    }\n    static getName() {\n        return \"Ambdec Files\";\n    }\n    static getDescription() {\n        return \"Ambdec Files\";\n    }\n    static container_type() {\n        return ContainerType.AMBDEC;\n    }\n    static test(obj) {\n        return false;\n    }\n    static parse(file, filename, carry, opts) {\n        let add = new ADD();\n        let lines = file.data.split('\\n');\n        let ambdec = new Ambdec();\n        let parser_state = ParserState.COMMANDS;\n        let current_matrix = '';\n        lines.forEach((line, index) => {\n            line = line.trim();\n            line = line.split('#')[0];\n            if (!line.length)\n                return;\n            if (line.charAt(0) == '/') {\n                let cmd = parseAmbdecCommand(line);\n                switch (cmd.name) {\n                    case '/description':\n                        add.setName(cmd.value);\n                        break;\n                    case '/version':\n                        add.setVersion(Number.parseInt(cmd.value));\n                        break;\n                    case '/dec/chan_mask':\n                        ambdec.chmask = cmd.value;\n                    case '/dec/coeff_scale':\n                        ambdec.normalisation = cmd.value;\n                        break;\n                    case '/opt/xover_freq':\n                        ambdec.xover = Number.parseFloat(cmd.value);\n                        break;\n                    case '/opt/xover_ratio':\n                        ambdec.xover_ratio = Number.parseFloat(cmd.value);\n                        break;\n                    case '/speakers/{':\n                        parser_state = ParserState.SPEAKERS;\n                        break;\n                    case '/lfmatrix/{':\n                        parser_state = ParserState.MATRIX;\n                        current_matrix = 'lf';\n                        break;\n                    case '/hfmatrix/{':\n                        parser_state = ParserState.MATRIX;\n                        current_matrix = 'hf';\n                        break;\n                    case '/matrix/{':\n                        parser_state = ParserState.MATRIX;\n                        current_matrix = 'r';\n                        break;\n                    case 'end_mat':\n                        parser_state = ParserState.COMMANDS;\n                        break;\n                }\n            }\n            else {\n                switch (parser_state) {\n                    case ParserState.MATRIX:\n                        doParseMatrix(line, current_matrix, ambdec);\n                        break;\n                    case ParserState.SPEAKERS:\n                        doParseSpeaker(line, ambdec);\n                        break;\n                }\n            }\n        });\n        if (ambdec.normalisation.toLowerCase() != 'sn3d'\n            && ambdec.normalisation.toLowerCase() != 'n3d')\n            throw new ParseError(filename, \"Unexpected normalisation: \" + ambdec.normalisation);\n        add.setDescription(\"Parsed from ambdec configuration file '\" + filename + \"'\");\n        if (ambdec.hfmtx.length && ambdec.lfmtx.length) {\n            add.addFilter(Filter.makeLowpass(\"lfmatrix\", 0, ambdec.xover));\n            add.addFilter(Filter.makeHighpass(\"hfmatrix\", 0, ambdec.xover));\n            add.addMatrix(new Matrix(ambdec.normalisation, ambdec.lfmtx));\n            add.addMatrix(new Matrix(ambdec.normalisation, ambdec.hfmtx));\n        }\n        else if (ambdec.mtx) {\n            add.addMatrix(new Matrix(ambdec.normalisation, ambdec.mtx));\n        }\n        let acnmask = [];\n        if (ambdec.chmask.length)\n            acnmask = Number.parseInt(\"0x\" + ambdec.chmask)\n                .toString(2).split('').map(s => Number.parseInt(s));\n        else\n            acnmask = new Array(ambdec.mtx[0].length).fill(1);\n        add.decoder.matrices.forEach(mat => {\n            mat.matrix.forEach((ch, i) => {\n                let new_ch = [];\n                acnmask.forEach(nfill => {\n                    new_ch.push((nfill) ? ch.shift() : 0);\n                });\n                mat.matrix[i] = new_ch;\n            });\n        });\n        ambdec.spks.forEach(spk => {\n            add.addOutput(new OutputChannel(spk.name, 'spk', spk.coord));\n        });\n        for (let i = 0; i < add.numOutputs(); ++i) {\n            add.decoder.output.summing_matrix.push(new Array(add.totalMatrixOutputs()).fill(0));\n            add.decoder.output.summing_matrix[i][i] = 1;\n            if (add.decoder.filters.length)\n                add.decoder.output.summing_matrix[i][i + add.numOutputs()] = 1;\n        }\n        add.createDefaultMetadata();\n        if (add.valid())\n            carry.results.push(add);\n        else\n            carry.incomplete_results.push(add);\n    }\n    static fromADD(add) {\n        ambdecRemoveImagSpeakers(add);\n        let pair = ambdecFindXoverPair(add.decoder.filters);\n        let dualband = false;\n        let xover_f = 0;\n        if (pair) {\n            xover_f = add.decoder.filters[pair.h].low;\n            dualband = true;\n        }\n        let out = { str: \"# created with dotaddtool \" + new Date(Date.now()).toUTCString() + \"\\n\\n\" };\n        ambdecAppendValue(out, \"description\\t\", add.name + \"/\" + add.description);\n        ambdecAppendNewlines(out, 1);\n        ambdecAppendValue(out, \"version\", \"\\t\" + ((add.version) ? +add.version : 0));\n        ambdecAppendNewlines(out, 1);\n        ambdecAppendValue(out, 'dec/chan_mask', \"\\t\" + adjustMatrixAndGetChannelMask(add.decoder.matrices));\n        ambdecAppendValue(out, 'dec/freq_bands', ((add.decoder.filters.length) ? \"2\" : \"1\"));\n        ambdecAppendValue(out, 'dec/speakers', \"\\t\" + add.decoder.output.channels.length);\n        ambdecAppendValue(out, 'dec/coeff_scale', add.decoder.matrices[0].getNormalization());\n        ambdecAppendNewlines(out, 1);\n        ambdecAppendValue(out, 'out/input_scale', add.decoder.matrices[0].getNormalization());\n        ambdecAppendValue(out, 'out/nfeff_comp', 'output');\n        ambdecAppendValue(out, 'out/delay_comp', 'off'),\n            ambdecAppendValue(out, 'out/level_comp', 'off'),\n            ambdecAppendValue(out, 'out/xover_freq', \"\" + xover_f);\n        ambdecAppendValue(out, 'out/xover_ratio', '0');\n        ambdecAppendNewlines(out, 3);\n        ambdecAppendSpeakers(out, add);\n        ambdecAppendNewlines(out, 2);\n        if (!dualband)\n            ambdecWriteMatrix(out, add.decoder.matrices[0].matrix, 'r');\n        else {\n            if (pair) {\n                ambdecWriteMatrix(out, add.decoder.matrices[pair.l].matrix, 'lf');\n                ambdecAppendNewlines(out, 1);\n                ambdecWriteMatrix(out, add.decoder.matrices[pair.h].matrix, 'hf');\n            }\n        }\n        return out.str;\n    }\n};\nAmbdecFormat = __decorate([\n    _static_implements()\n], AmbdecFormat);\nexport default AmbdecFormat;\nvar ParserState;\n(function (ParserState) {\n    ParserState[ParserState[\"COMMANDS\"] = 0] = \"COMMANDS\";\n    ParserState[ParserState[\"SPEAKERS\"] = 1] = \"SPEAKERS\";\n    ParserState[ParserState[\"MATRIX\"] = 2] = \"MATRIX\";\n})(ParserState || (ParserState = {}));\nfunction parseAmbdecCommand(line) {\n    let elems = line.split(\" \")\n        .map(s => s.trim())\n        .filter((s) => s.length);\n    if (elems[0] == '/}')\n        return { name: 'end_mat', value: null };\n    if (elems.length == 1)\n        return { name: elems[0], value: null };\n    if (elems.length > 1)\n        return { name: elems[0], value: elems[1] };\n    return { name: \"\", value: \"\" };\n}\nfunction doParseMatrix(line, current_mtx, ambdec) {\n    let elems = line.trim().split(/\\s+/).map(el => el.trim()).filter(el => el.length);\n    if (elems.shift() == 'add_row') {\n        let coefs = elems.map(str => Number.parseFloat(str));\n        switch (current_mtx) {\n            case 'lf':\n                ambdec.lfmtx.push(coefs);\n                break;\n            case 'hf':\n                ambdec.hfmtx.push(coefs);\n                break;\n            case 'r':\n                ambdec.mtx.push(coefs);\n        }\n    }\n}\nfunction doParseSpeaker(line, ambdec) {\n    let elems = line.trim().split(/\\s+/)\n        .map((el) => el.trim())\n        .filter((el) => el.length);\n    if (elems.shift() == 'add_spkr') {\n        let el_name = elems.shift();\n        let crs = elems.map(str => Number.parseFloat(str));\n        ambdec.spks.push({\n            coord: new AEDCoord(crs[1], crs[2], crs[0]),\n            name: el_name\n        });\n    }\n}\nfunction ambdecAppendNewlines(out, lines) {\n    for (let i = 0; i < lines; ++i)\n        out.str = out.str + \"\\n\";\n}\nfunction ambdecAppendLine(out, line) {\n    out.str = out.str + line + \"\\n\";\n}\nfunction ambdecAppendValue(out, name, value) {\n    out.str = out.str + '/' + name + ((value) ? \" \\t\" + value + \"\\n\" : \"\\n\");\n}\nfunction ambdecSectionEnd(out) {\n    ambdecAppendValue(out, \"}\");\n}\nfunction ambdecWriteMatrix(out, matrix, type) {\n    let mat_begin = \"\";\n    switch (type) {\n        case \"lf\":\n            mat_begin = \"hfmatrix/{\";\n            break;\n        case \"hf\":\n            mat_begin = \"lfmatrix/{\";\n            break;\n        case \"r\":\n            mat_begin = \"matrix/{\";\n            break;\n    }\n    ambdecAppendValue(out, mat_begin);\n    let order = ACN.order(matrix[0].length);\n    let order_gain_line = \"order_gain\";\n    for (let i = 0; i < order; ++i)\n        order_gain_line = order_gain_line + \"\\t1.0\";\n    ambdecAppendLine(out, order_gain_line);\n    matrix.forEach(ch => {\n        ambdecAppendLine(out, \"add_row \" + ch.join(\"  \"));\n    });\n    ambdecSectionEnd(out);\n}\nfunction adjustMatrixAndGetChannelMask(mtx) {\n    let num_coeffs = 0;\n    let mat_idx = 0;\n    // find the largest matrix\n    mtx.forEach((mat, idx) => {\n        if (mat.numCoeffs() > num_coeffs) {\n            mat_idx = idx;\n            num_coeffs = mat.numCoeffs();\n        }\n    });\n    let map = [];\n    // create a map of only zero values\n    for (let i = 0; i < num_coeffs; ++i)\n        map.push(mtx[mat_idx].matrix\n            .reduce((carry, arr) => (arr[i] == 0) && carry, true));\n    mtx.forEach((mat, idx) => {\n        if (idx === mat_idx)\n            return;\n        map.forEach((cf, i) => {\n            map[i] = map[i] && mat.matrix\n                .reduce((carry, arr) => (arr[i] == 0) && carry, true);\n        });\n    });\n    mtx.forEach((mat, idx) => {\n        mat.matrix.forEach((ch, i) => {\n            let new_arr = [];\n            map.forEach(f => {\n                if (!f)\n                    new_arr.push(ch.shift());\n                else\n                    ch.shift();\n            });\n            mat.matrix[i] = new_arr;\n        });\n    });\n    return Number.parseInt(map.map(b => b ? \"0\" : \"1\").join(\"\"), 2).toString(16);\n}\nfunction ambdecAppendSpeakers(out, add) {\n    ambdecAppendValue(out, 'speakers/{');\n    add.decoder.output.channels.forEach((ch, i) => {\n        out.str = out.str +\n            `add_spkr\\t${(ch.name && ch.name.length) ? ch.name.split(/\\s+/).join(\"_\") : \"spk\" + i}\\t${(ch.coords) ? (ch.coords.d) ? ch.coords.d : \"1.0\" : \"1.0\"}\\t${(ch.coords) ? ch.coords.a : \"0\"}\\t${(ch.coords) ? ch.coords.e : \"0\"}\\n`;\n    });\n    ambdecSectionEnd(out);\n}\nfunction ambdecFindXoverPair(filters) {\n    try {\n        filters.forEach((flt, idx) => {\n            filters.forEach((flt2, idx2) => {\n                if (idx === idx2)\n                    return;\n                if (flt.isHighpass() && flt2.isLowpass()) {\n                    if (flt.low == flt2.high)\n                        throw { h: idx, l: idx2 };\n                }\n                if (flt.isLowpass() && flt2.isHighpass()) {\n                    if (flt.high == flt2.low)\n                        throw { h: idx2, l: idx };\n                }\n            });\n        });\n    }\n    catch (result) {\n        return result;\n    }\n}\nfunction ambdecChannelMaskForOrder(order) {\n    return Number.parseInt(new Array(ACN.maxChannels(order)).fill(1).join(\"\"), 2).toString(16);\n}\nfunction ambdecRemoveImagSpeakers(add) {\n    let new_chs = [];\n    let new_summing_mtx = [];\n    add.decoder.output.channels.forEach((ch, idx) => {\n        if (!(add.decoder.output.summing_matrix[idx].reduce((is_null, c) => is_null && (c == 0), true))) {\n            new_summing_mtx.push(add.decoder.output.summing_matrix[idx]);\n            new_chs.push(add.decoder.output.channels[idx]);\n        }\n    });\n    add.decoder.output.channels = new_chs;\n    add.decoder.output.summing_matrix = new_summing_mtx;\n}\n"],"file":"AmbdecFormat.js"}