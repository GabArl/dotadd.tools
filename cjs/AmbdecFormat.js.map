{"version":3,"sources":["../build/AmbdecFormat.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","Ambdec","constructor","normalisation","xover","xover_ratio","hfmtx","lfmtx","mtx","spks","chmask","AmbdecFormat","shortName","getName","getDescription","container_type","ContainerType","AMBDEC","test","obj","parse","file","filename","carry","opts","add","ADD","lines","data","split","ambdec","parser_state","ParserState","COMMANDS","current_matrix","forEach","line","index","trim","charAt","cmd","parseAmbdecCommand","name","setName","value","setVersion","Number","parseInt","parseFloat","SPEAKERS","MATRIX","doParseMatrix","doParseSpeaker","toLowerCase","ParseError","setDescription","addFilter","Filter","makeLowpass","makeHighpass","addMatrix","Matrix","acnmask","toString","map","s","decoder","matrices","mat","matrix","ch","new_ch","nfill","push","shift","spk","addOutput","OutputChannel","coord","numOutputs","output","summing_matrix","Array","totalMatrixOutputs","fill","filters","createDefaultMetadata","valid","results","incomplete_results","fromADD","out","str","Date","now","toISOString","ambdecAppendValue","description","ambdecAppendNewlines","version","ambdecChannelMaskForOrder","maxAmbisonicOrder","channels","ambdecWriteMatrix","console","log","elems","filter","current_mtx","el","coefs","el_name","crs","AEDCoord","ambdecAppendLine","type","mat_begin","join","order","ACN","maxChannels"],"mappings":"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","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ADD, Matrix, AEDCoord, Filter, OutputChannel, ACN } from 'dotadd.js';\nimport { _static_implements, ContainerType } from './ADCFormat';\nimport { ParseError } from './Util';\nclass Ambdec {\n    constructor() {\n        this.normalisation = \"\";\n        this.xover = 0;\n        this.xover_ratio = 0;\n        this.hfmtx = [];\n        this.lfmtx = [];\n        this.mtx = [];\n        this.spks = [];\n        this.chmask = \"\";\n    }\n}\nlet AmbdecFormat = class AmbdecFormat {\n    static shortName() {\n        return \"ambdec\";\n    }\n    static getName() {\n        return \"Ambdec Files\";\n    }\n    static getDescription() {\n        return \"Ambdec Files\";\n    }\n    static container_type() {\n        return ContainerType.AMBDEC;\n    }\n    static test(obj) {\n        return false;\n    }\n    static parse(file, filename, carry, opts) {\n        let add = new ADD();\n        let lines = file.data.split('\\n');\n        let ambdec = new Ambdec();\n        let parser_state = ParserState.COMMANDS;\n        let current_matrix = '';\n        lines.forEach((line, index) => {\n            line = line.trim();\n            line = line.split('#')[0];\n            if (!line.length)\n                return;\n            if (line.charAt(0) == '/') {\n                let cmd = parseAmbdecCommand(line);\n                switch (cmd.name) {\n                    case '/description':\n                        add.setName(cmd.value);\n                        break;\n                    case '/version':\n                        add.setVersion(Number.parseInt(cmd.value));\n                        break;\n                    case '/dec/chan_mask':\n                        ambdec.chmask = cmd.value;\n                    case '/dec/coeff_scale':\n                        ambdec.normalisation = cmd.value;\n                        break;\n                    case '/opt/xover_freq':\n                        ambdec.xover = Number.parseFloat(cmd.value);\n                        break;\n                    case '/opt/xover_ratio':\n                        ambdec.xover_ratio = Number.parseFloat(cmd.value);\n                        break;\n                    case '/speakers/{':\n                        parser_state = ParserState.SPEAKERS;\n                        break;\n                    case '/lfmatrix/{':\n                        parser_state = ParserState.MATRIX;\n                        current_matrix = 'lf';\n                        break;\n                    case '/hfmatrix/{':\n                        parser_state = ParserState.MATRIX;\n                        current_matrix = 'hf';\n                        break;\n                    case '/matrix/{':\n                        parser_state = ParserState.MATRIX;\n                        current_matrix = 'r';\n                        break;\n                    case 'end_mat':\n                        parser_state = ParserState.COMMANDS;\n                        break;\n                }\n            }\n            else {\n                switch (parser_state) {\n                    case ParserState.MATRIX:\n                        doParseMatrix(line, current_matrix, ambdec);\n                        break;\n                    case ParserState.SPEAKERS:\n                        doParseSpeaker(line, ambdec);\n                        break;\n                }\n            }\n        });\n        if (ambdec.normalisation.toLowerCase() != 'sn3d'\n            && ambdec.normalisation.toLowerCase() != 'n3d')\n            throw new ParseError(filename, \"Unexpected normalisation: \" + ambdec.normalisation);\n        add.setDescription(\"Parsed from ambdec configuration file '\" + filename + \"'\");\n        if (ambdec.hfmtx.length && ambdec.lfmtx.length) {\n            add.addFilter(Filter.makeLowpass(\"lfmatrix\", 0, ambdec.xover));\n            add.addFilter(Filter.makeHighpass(\"hfmatrix\", 0, ambdec.xover));\n            add.addMatrix(new Matrix(ambdec.normalisation, ambdec.lfmtx));\n            add.addMatrix(new Matrix(ambdec.normalisation, ambdec.hfmtx));\n        }\n        else if (ambdec.mtx) {\n            add.addMatrix(new Matrix(ambdec.normalisation, ambdec.mtx));\n        }\n        let acnmask = Number.parseInt(\"0x\" + ambdec.chmask)\n            .toString(2).split('').map(s => Number.parseInt(s));\n        add.decoder.matrices.forEach(mat => {\n            mat.matrix.forEach((ch, i) => {\n                let new_ch = [];\n                acnmask.forEach(nfill => {\n                    new_ch.push((nfill) ? ch.shift() : 0);\n                });\n                mat.matrix[i] = new_ch;\n            });\n        });\n        ambdec.spks.forEach(spk => {\n            add.addOutput(new OutputChannel(spk.name, 'spk', spk.coord));\n        });\n        for (let i = 0; i < add.numOutputs(); ++i) {\n            add.decoder.output.summing_matrix.push(new Array(add.totalMatrixOutputs()).fill(0));\n            add.decoder.output.summing_matrix[i][i] = 1;\n            if (add.decoder.filters.length)\n                add.decoder.output.summing_matrix[i][i + add.numOutputs()] = 1;\n        }\n        add.createDefaultMetadata();\n        if (add.valid())\n            carry.results.push(add);\n        else\n            carry.incomplete_results.push(add);\n    }\n    static fromADD(add) {\n        let out = { str: \"# created with dotaddtool \" + new Date(Date.now()).toISOString() + \"\\n\\n\" };\n        ambdecAppendValue(out, \"description\", add.name + \"/\" + add.description);\n        ambdecAppendNewlines(out, 1);\n        ambdecAppendValue(out, \"version\", \"\" + add.version);\n        ambdecAppendNewlines(out, 1);\n        ambdecAppendValue(out, 'dec/chan_mask', \"\" + ambdecChannelMaskForOrder(add.maxAmbisonicOrder()));\n        ambdecAppendValue(out, 'dec/freq_bands', ((add.decoder.filters.length) ? \"2\" : \"1\"));\n        ambdecAppendValue(out, 'dec/speakers', \"\" + add.decoder.output.channels.length);\n        ambdecWriteMatrix(out, add.decoder.matrices[0].matrix, 'lf');\n        console.log();\n        return out.str;\n    }\n};\nAmbdecFormat = __decorate([\n    _static_implements()\n], AmbdecFormat);\nexport default AmbdecFormat;\nvar ParserState;\n(function (ParserState) {\n    ParserState[ParserState[\"COMMANDS\"] = 0] = \"COMMANDS\";\n    ParserState[ParserState[\"SPEAKERS\"] = 1] = \"SPEAKERS\";\n    ParserState[ParserState[\"MATRIX\"] = 2] = \"MATRIX\";\n})(ParserState || (ParserState = {}));\nfunction parseAmbdecCommand(line) {\n    let elems = line.split(\" \")\n        .map(s => s.trim())\n        .filter((s) => s.length);\n    if (elems[0] == '/}')\n        return { name: 'end_mat', value: null };\n    if (elems.length == 1)\n        return { name: elems[0], value: null };\n    if (elems.length > 1)\n        return { name: elems[0], value: elems[1] };\n    return { name: \"\", value: \"\" };\n}\nfunction doParseMatrix(line, current_mtx, ambdec) {\n    let elems = line.trim().split(/\\s+/).map(el => el.trim()).filter(el => el.length);\n    if (elems[0] == 'add_row') {\n        elems.shift();\n        let coefs = elems.map(str => Number.parseFloat(str));\n        switch (current_mtx) {\n            case 'lf':\n                ambdec.lfmtx.push(coefs);\n                break;\n            case 'hf':\n                ambdec.hfmtx.push(coefs);\n                break;\n            case 'r':\n                ambdec.mtx.push(coefs);\n        }\n    }\n}\nfunction doParseSpeaker(line, ambdec) {\n    let elems = line.trim().split(/\\s+/)\n        .map((el) => el.trim())\n        .filter((el) => el.length);\n    if (elems.shift() == 'add_spkr') {\n        let el_name = elems.shift();\n        let crs = elems.map(str => Number.parseFloat(str));\n        ambdec.spks.push({\n            coord: new AEDCoord(crs[1], crs[2], crs[0]),\n            name: el_name\n        });\n    }\n}\nfunction ambdecAppendNewlines(out, lines) {\n    for (let i = 0; i < lines; ++i)\n        out.str = out.str + \"\\n\";\n}\nfunction ambdecAppendLine(out, line) {\n    out.str = out.str + line + \"\\n\";\n}\nfunction ambdecAppendValue(out, name, value) {\n    out.str = out.str + '/' + name + ((value) ? \" \\t\\t\" + value + \"\\n\" : \"\\n\");\n}\nfunction ambdecWriteMatrix(out, matrix, type) {\n    ambdecAppendNewlines(out, 3);\n    let mat_begin = \"\";\n    switch (type) {\n        case \"lf\":\n            mat_begin = \"hfmatrix/{\";\n            break;\n        case \"hf\":\n            mat_begin = \"lfmatrix/{\";\n            break;\n        case \"r\":\n            mat_begin = \"matrix/{\";\n            break;\n    }\n    ambdecAppendValue(out, mat_begin);\n    matrix.forEach(ch => {\n        ambdecAppendLine(out, \"add_row \" + ch.join(\"  \"));\n    });\n    ambdecAppendValue(out, \"}\");\n}\nfunction ambdecChannelMaskForOrder(order) {\n    return Number.parseInt(new Array(ACN.maxChannels(order)).fill(1).join(\"\"), 2).toString(16);\n}\n"],"file":"AmbdecFormat.js"}