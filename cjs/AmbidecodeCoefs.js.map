{"version":3,"sources":["../build/AmbidecodeCoefs.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","AmbidecodeCoefs","shortName","getName","getDescription","container_type","ContainerType","XML","test","obj","hasOwnProperty","parse","filename","carry","opts","add","ADD","ambc","incomplete_results","pop","console","log","setName","speaker","coef","ParseError","decoder","matrices","addMatrix","Matrix","matrix","map","spk","cf","createDefaultMetadata","refitOutputChannels","refitOutputMatrix","valid","results","push","fromADD","parser","j2xParser","ignoreAttributes","format","indentBy","base_obj","forEach","ch","chi","coeff","acn","toFixed"],"mappings":"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","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ContainerType, _static_implements } from \"./ADCFormat\";\nimport { ADD, Matrix } from 'dotadd.js';\nimport { ParseError } from './Util';\nimport { j2xParser } from 'fast-xml-parser';\nlet AmbidecodeCoefs = class AmbidecodeCoefs {\n    static shortName() {\n        return \"ambidecode\";\n    }\n    static getName() {\n        return \"Ambidecode XML Configuration Files\";\n    }\n    static getDescription() {\n        return \"Exported and Imported by the ICST Ambisonics Externals for Max/MSP.\";\n    }\n    static container_type() {\n        return ContainerType.XML;\n    }\n    static test(obj) {\n        return obj.hasOwnProperty(\"ambidecode-coefs\");\n    }\n    static parse(obj, filename, carry, opts) {\n        let add = new ADD();\n        let ambc = obj['ambidecode-coefs'];\n        if (carry.incomplete_results.length) {\n            add = carry.incomplete_results.pop();\n            console.log('using incomplete result from previous run');\n        }\n        else\n            add.setName(filename);\n        if (!ambc.speaker[0].coef[0].hasOwnProperty(\"@_ACN\"))\n            throw new ParseError(filename, \"Unsupported channel ordering\");\n        if (!add.decoder.matrices.length)\n            add.addMatrix(new Matrix('unknown', []));\n        else\n            add.decoder.matrices[0].matrix = [];\n        add.decoder.matrices[0].matrix = ambc.speaker.map((spk) => spk.coef.map((cf) => cf['#text']));\n        add.createDefaultMetadata();\n        add.refitOutputChannels();\n        add.refitOutputMatrix();\n        if (add.valid())\n            carry.results.push(add);\n        else {\n            console.log('stashing incomplete result: ' + filename);\n            carry.incomplete_results.push(add);\n        }\n    }\n    static fromADD(add) {\n        const parser = new j2xParser({ ignoreAttributes: false, format: true, indentBy: \"    \" });\n        let base_obj = {\n            'ambidecode-coefs': {\n                '@_version': '0.1',\n                speaker: []\n            }\n        };\n        add.decoder.matrices[add.decoder.matrices.length - 1].matrix.forEach((ch, chi) => {\n            base_obj[\"ambidecode-coefs\"].speaker.push({\n                '@_index': chi,\n                coef: ch.map((coeff, acn) => { return { '#text': coeff.toFixed(20), '@_ACN': '' + acn }; })\n            });\n        });\n        return '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n' + parser.parse(base_obj);\n    }\n};\nAmbidecodeCoefs = __decorate([\n    _static_implements()\n], AmbidecodeCoefs);\nexport default AmbidecodeCoefs;\n"],"file":"AmbidecodeCoefs.js"}