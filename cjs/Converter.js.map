{"version":3,"sources":["../build/Converter.js"],"names":["formats","AmbidecodeFormat","IEMFormat","ParseResults","constructor","results","ConvertableTextFile","filename","data","ConverterOption","name","value","used","type","peek","wasUsed","use","ConverterOptions","args","options","has","find","opt","undefined","get","getUnused","reduce","carry","current","push","Converter","convert_string","files","file","ftype","slice","lastIndexOf","charAt","_do_parse_json","_do_parse_add","convert_binary","list_formats","opts","_do_parse_native","JSON","parse","ContainerType","_do_parse_xml","ignoreAttributes","XML","obj","container_type","parsers_to_try","format","test","forEach","parser"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AACA,IAAIA,OAAO,GAAG,CACVC,yBADU,EAEVC,kBAFU,CAAd;;AAIO,MAAMC,YAAN,CAAmB;AACtBC,EAAAA,WAAW,GAAG;AACV,SAAKC,OAAL,GAAe,EAAf;AACH;;AAHqB;;;;AAKnB,MAAMC,mBAAN,CAA0B;AAC7BF,EAAAA,WAAW,GAAG;AACV,SAAKG,QAAL,GAAgB,EAAhB;AACA,SAAKC,IAAL,GAAY,EAAZ;AACH;;AAJ4B;;;;AAM1B,MAAMC,eAAN,CAAsB;AACzBL,EAAAA,WAAW,CAACM,IAAD,EAAOC,KAAP,EAAc;AACrB,SAAKC,IAAL,GAAY,KAAZ;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACH;;AACDE,EAAAA,IAAI,GAAG;AAAE,WAAO,OAAO,KAAKF,KAAnB;AAA2B;;AACpCG,EAAAA,IAAI,GAAG;AAAE,WAAO,KAAKH,KAAZ;AAAoB;;AAC7BI,EAAAA,OAAO,GAAG;AAAE,WAAO,KAAKH,IAAZ;AAAmB;;AAC/BI,EAAAA,GAAG,GAAG;AACF,SAAKJ,IAAL,GAAY,IAAZ;AACA,WAAO,KAAKD,KAAZ;AACH;;AAZwB;;;;AActB,MAAMM,gBAAN,CAAuB;AAC1Bb,EAAAA,WAAW,CAAC,GAAGc,IAAJ,EAAU;AACjB,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKA,OAAL,GAAeD,IAAf;AACH;;AACDE,EAAAA,GAAG,CAACV,IAAD,EAAO;AACN,WAAO,KAAKS,OAAL,CAAaE,IAAb,CAAkBC,GAAG,IAAIA,GAAG,CAACZ,IAAJ,KAAaA,IAAtC,KAA+Ca,SAAtD;AACH;;AACDC,EAAAA,GAAG,CAACd,IAAD,EAAO;AACN,WAAO,KAAKS,OAAL,CAAaE,IAAb,CAAkBC,GAAG,IAAIA,GAAG,CAACZ,IAAJ,KAAaA,IAAtC,CAAP;AACH;;AACDM,EAAAA,GAAG,CAACN,IAAD,EAAO;AACN,QAAIY,GAAG,GAAG,KAAKE,GAAL,CAASd,IAAT,CAAV;AACA,QAAIY,GAAJ,EACI,OAAOA,GAAG,CAACN,GAAJ,EAAP;AACP;;AACDS,EAAAA,SAAS,GAAG;AACR,WAAO,KAAKN,OAAL,CAAaO,MAAb,CAAoB,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC3C,OAACA,OAAO,CAAChB,IAAT,GAAgBe,KAAK,CAACE,IAAN,CAAWD,OAAX,CAAhB,GAAsC,IAAtC;AACA,aAAOD,KAAP;AACH,KAHM,EAGJ,EAHI,CAAP;AAIH;;AArByB;;;AAuBvB,MAAMG,SAAS,GAAG;AACrBC,EAAAA,cAAc,CAACC,KAAD,EAAQb,OAAR,EAAiB;AAC3B,QAAId,OAAO,GAAG,IAAIF,YAAJ,EAAd;;AACA,SAAK,IAAI8B,IAAT,IAAiBD,KAAjB,EAAwB;AACpB,UAAIE,KAAK,GAAGD,IAAI,CAAC1B,QAAL,CAAc4B,KAAd,CAAoB,CAACF,IAAI,CAAC1B,QAAL,CAAc6B,WAAd,CAA0B,GAA1B,IAAiC,CAAjC,KAAuC,CAAxC,IAA6C,CAAjE,CAAZ;;AACA,UAAI,EAAEF,KAAK,KAAK,KAAV,IAAmBA,KAAK,KAAK,MAA7B,IAAuCA,KAAK,KAAK,KAAnD,CAAJ,EAA+D;AAC3D,YAAID,IAAI,CAACzB,IAAL,CAAU6B,MAAV,CAAiB,CAAjB,MAAwB,GAA5B,EACIH,KAAK,GAAG,KAAR,CADJ,KAEK,IAAID,IAAI,CAACzB,IAAL,CAAU6B,MAAV,CAAiB,CAAjB,MAAwB,GAAxB,IAA+BJ,IAAI,CAACzB,IAAL,CAAU6B,MAAV,CAAiB,CAAjB,MAAwB,GAA3D,EACDH,KAAK,GAAG,MAAR;AACP;;AACD,cAAQA,KAAR;AACI,aAAK,MAAL;AACI,eAAKI,cAAL,CAAoBL,IAApB,EAA0B5B,OAA1B,EAAmCc,OAAnC;;AACJ,aAAK,KAAL;AACI,eAAKmB,cAAL,CAAoBL,IAApB,EAA0B5B,OAA1B,EAAmCc,OAAnC;;AACJ,aAAK,KAAL;AACI,eAAKoB,aAAL,CAAmBN,IAAnB,EAAyB5B,OAAzB,EAAkCc,OAAlC;;AANR;AAQH;AACJ,GApBoB;;AAqBrBqB,EAAAA,cAAc,CAACjC,QAAD,EAAWC,IAAX,EAAiBW,OAAjB,EAA0B,CACvC,CAtBoB;;AAuBrBsB,EAAAA,YAAY,GAAG,CACd,CAxBoB;;AAyBrBH,EAAAA,cAAc,CAACL,IAAD,EAAON,KAAP,EAAce,IAAd,EAAoB;AAC9B,SAAKC,gBAAL,CAAsBV,IAAtB,EAA4BN,KAA5B,EAAmCe,IAAnC,EAAyCE,IAAI,CAACC,KAAL,CAAWZ,IAAI,CAACzB,IAAhB,CAAzC,EAAgEsC,yBAAcF,IAA9E;AACH,GA3BoB;;AA4BrBG,EAAAA,aAAa,CAACd,IAAD,EAAON,KAAP,EAAce,IAAd,EAAoB;AAC7B,SAAKC,gBAAL,CAAsBV,IAAtB,EAA4BN,KAA5B,EAAmCe,IAAnC,EAAyC,0BAAUT,IAAI,CAACzB,IAAf,EAAqB;AAAEwC,MAAAA,gBAAgB,EAAE;AAApB,KAArB,CAAzC,EAA4FF,yBAAcG,GAA1G;AACH,GA9BoB;;AA+BrBV,EAAAA,aAAa,CAACN,IAAD,EAAON,KAAP,EAAce,IAAd,EAAoB,CAChC,CAhCoB;;AAiCrBC,EAAAA,gBAAgB,CAACV,IAAD,EAAON,KAAP,EAAce,IAAd,EAAoBQ,GAApB,EAAyBC,cAAzB,EAAyC;AACrD,QAAIC,cAAc,GAAG,EAArB;;AACA,SAAK,IAAIC,MAAT,IAAmBrD,OAAnB,EAA4B;AACxB,UAAIqD,MAAM,CAACF,cAAP,OAA4BA,cAA5B,IAA8CE,MAAM,CAACC,IAAP,CAAYJ,GAAZ,CAAlD,EACIE,cAAc,CAACvB,IAAf,CAAoBwB,MAApB;AACP;;AACDD,IAAAA,cAAc,CAACG,OAAf,CAAuBC,MAAM,IAAIA,MAAM,CAACX,KAAP,CAAaK,GAAb,EAAkBjB,IAAI,CAAC1B,QAAvB,EAAiCoB,KAAjC,EAAwCe,IAAxC,CAAjC;AACH;;AAxCoB,CAAlB","sourcesContent":["import { ContainerType } from './ADCFormat';\nimport AmbidecodeFormat from './AmbidecodeFormat';\nimport IEMFormat from './IEMFormat';\nimport { parse as parse_xml } from 'fast-xml-parser';\nlet formats = [\n    AmbidecodeFormat,\n    IEMFormat\n];\nexport class ParseResults {\n    constructor() {\n        this.results = [];\n    }\n}\nexport class ConvertableTextFile {\n    constructor() {\n        this.filename = \"\";\n        this.data = \"\";\n    }\n}\nexport class ConverterOption {\n    constructor(name, value) {\n        this.used = false;\n        this.name = name;\n        this.value = value;\n    }\n    type() { return typeof this.value; }\n    peek() { return this.value; }\n    wasUsed() { return this.used; }\n    use() {\n        this.used = true;\n        return this.value;\n    }\n}\nexport class ConverterOptions {\n    constructor(...args) {\n        this.options = [];\n        this.options = args;\n    }\n    has(name) {\n        return this.options.find(opt => opt.name === name) != undefined;\n    }\n    get(name) {\n        return this.options.find(opt => opt.name === name);\n    }\n    use(name) {\n        let opt = this.get(name);\n        if (opt)\n            return opt.use();\n    }\n    getUnused() {\n        return this.options.reduce((carry, current) => {\n            !current.used ? carry.push(current) : null;\n            return carry;\n        }, []);\n    }\n}\nexport const Converter = {\n    convert_string(files, options) {\n        let results = new ParseResults();\n        for (let file of files) {\n            let ftype = file.filename.slice((file.filename.lastIndexOf(\".\") - 1 >>> 0) + 2);\n            if (!(ftype === 'xml' || ftype === 'json' || ftype === 'add')) {\n                if (file.data.charAt(0) === '<')\n                    ftype = 'xml';\n                else if (file.data.charAt(0) === '{' || file.data.charAt(0) === '[')\n                    ftype = 'json';\n            }\n            switch (ftype) {\n                case 'json':\n                    this._do_parse_json(file, results, options);\n                case 'xml':\n                    this._do_parse_json(file, results, options);\n                case 'add':\n                    this._do_parse_add(file, results, options);\n            }\n        }\n    },\n    convert_binary(filename, data, options) {\n    },\n    list_formats() {\n    },\n    _do_parse_json(file, carry, opts) {\n        this._do_parse_native(file, carry, opts, JSON.parse(file.data), ContainerType.JSON);\n    },\n    _do_parse_xml(file, carry, opts) {\n        this._do_parse_native(file, carry, opts, parse_xml(file.data, { ignoreAttributes: false }), ContainerType.XML);\n    },\n    _do_parse_add(file, carry, opts) {\n    },\n    _do_parse_native(file, carry, opts, obj, container_type) {\n        let parsers_to_try = [];\n        for (let format of formats) {\n            if (format.container_type() === container_type && format.test(obj))\n                parsers_to_try.push(format);\n        }\n        parsers_to_try.forEach(parser => parser.parse(obj, file.filename, carry, opts));\n    }\n};\n"],"file":"Converter.js"}