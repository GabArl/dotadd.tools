{"version":3,"sources":["../build/Converter.js"],"names":["containerTypeToString","ty","ContainerType","CSV","JSON","XML","AMBDEC","CONFIG","formats","ADDFormat","AmbidecodeCoefs","AmbidecodeSettings","IEMFormat","CSVFormat","AmbdecFormat","AmbixConfigFormat","ParserMessageLevels","ParserMessage","constructor","mess","level","message","ParseResults","results","incomplete_results","messages","output_files","ConvertableTextFile","fname","data","filename","ConverterOption","name","value","used","type","peek","wasUsed","use","ConverterOptions","args","options","has","find","opt","undefined","get","getUnused","reduce","carry","current","push","Converter","convert_string","files","file","ftype","slice","lastIndexOf","console","log","charAt","replace","split","join","_do_parse_json","_do_parse_xml","_do_parse_add","_do_parse_csv","_do_parse_ambdec","_do_parse_ambix_config","_do_apply_options","_do_convert","opts","ofopt","output","fileext","format","length","converter","frm","shortName","getName","forEach","res","fromADD","container_type","container","add","Error","mopts","description","author","version","norm","renormalize","_do_apply_options_impl","restash","shift","valid","setAuthor","setName","setDescription","hasOwnProperty","setVersion","Number","parseInt","decoder","matrices","dec","setNormalization","toLowerCase","mat","renormalizeTo","_do_parse_native","parse","ignoreAttributes","Papa","obj","parsers_to_try","test","map","p","parser"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AACA,SAASA,qBAAT,CAA+BC,EAA/B,EAAmC;AAC/B,UAAQA,EAAR;AACI,SAAKC,yBAAcC,GAAnB;AACI,aAAO,KAAP;;AACJ,SAAKD,yBAAcE,IAAnB;AACI,aAAO,MAAP;;AACJ,SAAKF,yBAAcG,GAAnB;AACI,aAAO,KAAP;;AACJ,SAAKH,yBAAcI,MAAnB;AACI,aAAO,QAAP;;AACJ,SAAKJ,yBAAcK,MAAnB;AACI,aAAO,QAAP;AAVR;AAYH;;AACD,IAAIC,OAAO,GAAG,CACVC,kBADU,EAEVC,wBAFU,EAGVC,2BAHU,EAIVC,kBAJU,EAKVC,kBALU,EAMVC,qBANU,EAOVC,0BAPU,CAAd;AASO,IAAIC,mBAAJ;;;AACP,CAAC,UAAUA,mBAAV,EAA+B;AAC5BA,EAAAA,mBAAmB,CAACA,mBAAmB,CAAC,MAAD,CAAnB,GAA8B,CAA/B,CAAnB,GAAuD,MAAvD;AACAA,EAAAA,mBAAmB,CAACA,mBAAmB,CAAC,MAAD,CAAnB,GAA8B,CAA/B,CAAnB,GAAuD,MAAvD;AACAA,EAAAA,mBAAmB,CAACA,mBAAmB,CAAC,KAAD,CAAnB,GAA6B,CAA9B,CAAnB,GAAsD,KAAtD;AACH,CAJD,EAIGA,mBAAmB,mCAAKA,mBAAmB,GAAG,EAA3B,CAJtB;;AAKO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,KAAP,EAAc;AACrB,SAAKC,OAAL,GAAeF,IAAf;AACA,SAAKC,KAAL,GAAaA,KAAb;AACH;;AAJsB;;;;AAMpB,MAAME,YAAN,CAAmB;AACtBJ,EAAAA,WAAW,GAAG;AACV,SAAKK,OAAL,GAAe,EAAf;AACA,SAAKC,kBAAL,GAA0B,EAA1B;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,YAAL,GAAoB,EAApB;AACH;;AANqB;;;;AAQnB,MAAMC,mBAAN,CAA0B;AAC7BT,EAAAA,WAAW,CAACU,KAAD,EAAQC,IAAR,EAAc;AACrB,SAAKC,QAAL,GAAgBF,KAAhB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACH;;AAJ4B;;;;AAM1B,MAAME,eAAN,CAAsB;AACzBb,EAAAA,WAAW,CAACc,IAAD,EAAOC,KAAP,EAAc;AACrB,SAAKC,IAAL,GAAY,KAAZ;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACH;;AACDE,EAAAA,IAAI,GAAG;AAAE,WAAO,OAAO,KAAKF,KAAnB;AAA2B;;AACpCG,EAAAA,IAAI,GAAG;AAAE,WAAO,KAAKH,KAAZ;AAAoB;;AAC7BI,EAAAA,OAAO,GAAG;AAAE,WAAO,KAAKH,IAAZ;AAAmB;;AAC/BI,EAAAA,GAAG,GAAG;AACF,SAAKJ,IAAL,GAAY,IAAZ;AACA,WAAO,KAAKD,KAAZ;AACH;;AAZwB;;;;AActB,MAAMM,gBAAN,CAAuB;AAC1BrB,EAAAA,WAAW,CAAC,GAAGsB,IAAJ,EAAU;AACjB,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKA,OAAL,GAAeD,IAAf;AACH;;AACDE,EAAAA,GAAG,CAACV,IAAD,EAAO;AACN,WAAO,KAAKS,OAAL,CAAaE,IAAb,CAAkBC,GAAG,IAAIA,GAAG,CAACZ,IAAJ,KAAaA,IAAtC,KAA+Ca,SAAtD;AACH;;AACDC,EAAAA,GAAG,CAACd,IAAD,EAAO;AACN,WAAO,KAAKS,OAAL,CAAaE,IAAb,CAAkBC,GAAG,IAAIA,GAAG,CAACZ,IAAJ,KAAaA,IAAtC,CAAP;AACH;;AACDM,EAAAA,GAAG,CAACN,IAAD,EAAO;AACN,QAAIY,GAAG,GAAG,KAAKE,GAAL,CAASd,IAAT,CAAV;AACA,QAAIY,GAAJ,EACI,OAAOA,GAAG,CAACN,GAAJ,EAAP;AACP;;AACDS,EAAAA,SAAS,GAAG;AACR,WAAO,KAAKN,OAAL,CAAaO,MAAb,CAAoB,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC3C,OAACA,OAAO,CAAChB,IAAT,GAAgBe,KAAK,CAACE,IAAN,CAAWD,OAAX,CAAhB,GAAsC,IAAtC;AACA,aAAOD,KAAP;AACH,KAHM,EAGJ,EAHI,CAAP;AAIH;;AArByB;;;AAuBvB,MAAMG,SAAS,GAAG;AACrBC,EAAAA,cAAc,CAACC,KAAD,EAAQb,OAAR,EAAiB;AAC3B,QAAIlB,OAAO,GAAG,IAAID,YAAJ,EAAd;;AACA,SAAK,IAAIiC,IAAT,IAAiBD,KAAjB,EAAwB;AACpB,UAAIE,KAAK,GAAGD,IAAI,CAACzB,QAAL,CAAc2B,KAAd,CAAoB,CAACF,IAAI,CAACzB,QAAL,CAAc4B,WAAd,CAA0B,GAA1B,IAAiC,CAAjC,KAAuC,CAAxC,IAA6C,CAAjE,CAAZ;;AACAC,qBAAQC,GAAR,CAAY,sBAAsBL,IAAI,CAACzB,QAAvC;;AACA6B,qBAAQC,GAAR,CAAY,sBAAsBJ,KAAlC;;AACA,UAAI,EAAEA,KAAK,KAAK,KAAV,IACCA,KAAK,KAAK,MADX,IAECA,KAAK,KAAK,KAFb,CAAJ,EAEyB;AACrB,YAAID,IAAI,CAAC1B,IAAL,CAAUgC,MAAV,CAAiB,CAAjB,MAAwB,GAA5B,EACIL,KAAK,GAAG,KAAR,CADJ,KAEK,IAAID,IAAI,CAAC1B,IAAL,CAAUgC,MAAV,CAAiB,CAAjB,MAAwB,GAAxB,IAA+BN,IAAI,CAAC1B,IAAL,CAAUgC,MAAV,CAAiB,CAAjB,MAAwB,GAA3D,EACDL,KAAK,GAAG,MAAR;AACP;;AACDD,MAAAA,IAAI,CAACzB,QAAL,GAAgByB,IAAI,CAACzB,QAAL,CAAcgC,OAAd,CAAsB,WAAtB,EAAmC,EAAnC,EAAuCC,KAAvC,CAA6C,GAA7C,EAAkDN,KAAlD,CAAwD,CAAxD,EAA2D,CAAC,CAA5D,EAA+DO,IAA/D,CAAoE,GAApE,CAAhB;;AACA,cAAQR,KAAR;AACI,aAAK,MAAL;AACI,eAAKS,cAAL,CAAoBV,IAApB,EAA0BhC,OAA1B,EAAmCkB,OAAnC;;AACA;;AACJ,aAAK,KAAL;AACI,eAAKyB,aAAL,CAAmBX,IAAnB,EAAyBhC,OAAzB,EAAkCkB,OAAlC;;AACA;;AACJ,aAAK,KAAL;AACI,eAAK0B,aAAL,CAAmBZ,IAAnB,EAAyBhC,OAAzB,EAAkCkB,OAAlC;;AACA;;AACJ,aAAK,KAAL;AACI,eAAK2B,aAAL,CAAmBb,IAAnB,EAAyBhC,OAAzB,EAAkCkB,OAAlC;;AACA;;AACJ,aAAK,QAAL;AACI,eAAK4B,gBAAL,CAAsBd,IAAtB,EAA4BhC,OAA5B,EAAqCkB,OAArC;;AACA;;AACJ,aAAK,QAAL;AACI,eAAK6B,sBAAL,CAA4Bf,IAA5B,EAAkChC,OAAlC,EAA2CkB,OAA3C;;AACA;AAlBR;AAoBH;;AACDkB,mBAAQC,GAAR,CAAY,+BAAZ;;AACA,SAAKW,iBAAL,CAAuBhD,OAAvB,EAAgCkB,OAAhC;;AACA,SAAK+B,WAAL,CAAiBjD,OAAjB,EAA0BkB,OAA1B;;AACA,WAAOlB,OAAP;AACH,GAzCoB;;AA0CrBiD,EAAAA,WAAW,CAACvB,KAAD,EAAQwB,IAAR,EAAc;AACrB,QAAIC,KAAK,GAAGD,IAAI,CAACnC,GAAL,CAAS,QAAT,CAAZ;AACA,QAAIqC,MAAM,GAAGF,IAAI,CAACnC,GAAL,CAAS,QAAT,CAAb;AACA,QAAIsC,OAAO,GAAG,EAAd;AAAA,QAAkBC,MAAlB;AACA,QAAIF,MAAJ,EACIC,OAAO,GAAGD,MAAM,CAAClB,KAAP,CAAa,CAACkB,MAAM,CAACjB,WAAP,CAAmB,GAAnB,IAA0B,CAA1B,KAAgC,CAAjC,IAAsC,CAAnD,CAAV;AACJ,QAAIgB,KAAJ,EACIG,MAAM,GAAGH,KAAT,CADJ,KAEK,IAAIE,OAAO,CAACE,MAAZ,EACDD,MAAM,GAAGD,OAAT,CADC,KAGDC,MAAM,GAAG,KAAT;AACJ,QAAIE,SAAS,GAAGvE,OAAO,CAACmC,IAAR,CAAaqC,GAAG,IAAIA,GAAG,CAACC,SAAJ,MAAmBJ,MAAvC,CAAhB;;AACA,QAAIE,SAAJ,EAAe;AACXpB,qBAAQC,GAAR,CAAY,YAAYmB,SAAS,CAACG,OAAV,EAAZ,GAAkC,YAA9C;;AACAjC,MAAAA,KAAK,CAAC1B,OAAN,CAAc4D,OAAd,CAAsBC,GAAG,IAAI;AACzB,YAAIvD,IAAI,GAAGkD,SAAS,CAACM,OAAV,CAAkBD,GAAlB,EAAuBX,IAAvB,CAAX;;AACAd,uBAAQC,GAAR,CAAY,wBAAwBwB,GAAG,CAACpD,IAA5B,GAAmC,cAAnC,GAAoD6C,MAApD,GAA6D,gBAA7D,GAAgF7E,qBAAqB,CAAC+E,SAAS,CAACO,cAAV,EAAD,CAAjH;;AACArC,QAAAA,KAAK,CAACvB,YAAN,CAAmByB,IAAnB,CAAwB;AACpBnB,UAAAA,IAAI,EAAEoD,GAAG,CAACpD,IADU;AAEpB6C,UAAAA,MAAM,EAAEA,MAFY;AAGpBU,UAAAA,SAAS,EAAEvF,qBAAqB,CAAC+E,SAAS,CAACO,cAAV,EAAD,CAHZ;AAIpBzD,UAAAA,IAAI,EAAEA,IAJc;AAKpB2D,UAAAA,GAAG,EAAEJ;AALe,SAAxB;AAOH,OAVD;AAWH,KAbD,MAeI,MAAM,IAAIK,KAAJ,CAAU,eAAeZ,MAAf,GAAwB,aAAlC,CAAN;AACP,GAvEoB;;AAwErBN,EAAAA,iBAAiB,CAACtB,KAAD,EAAQwB,IAAR,EAAc;AAC3B,QAAIiB,KAAK,GAAG;AACRC,MAAAA,WAAW,EAAElB,IAAI,CAACnC,GAAL,CAAS,aAAT,CADL;AAERN,MAAAA,IAAI,EAAEyC,IAAI,CAACnC,GAAL,CAAS,MAAT,CAFE;AAGRsD,MAAAA,MAAM,EAAEnB,IAAI,CAACnC,GAAL,CAAS,QAAT,CAHA;AAIRuD,MAAAA,OAAO,EAAEpB,IAAI,CAACnC,GAAL,CAAS,SAAT,CAJD;AAKRwD,MAAAA,IAAI,EAAErB,IAAI,CAACnC,GAAL,CAAS,MAAT,CALE;AAMRyD,MAAAA,WAAW,EAAEtB,IAAI,CAACnC,GAAL,CAAS,QAAT;AANL,KAAZ;AAQAW,IAAAA,KAAK,CAAC1B,OAAN,CAAc4D,OAAd,CAAsBC,GAAG,IAAI,KAAKY,sBAAL,CAA4BZ,GAA5B,EAAiCM,KAAjC,CAA7B;AACAzC,IAAAA,KAAK,CAACzB,kBAAN,CAAyB2D,OAAzB,CAAiCC,GAAG,IAAI,KAAKY,sBAAL,CAA4BZ,GAA5B,EAAiCM,KAAjC,CAAxC;AACA,QAAIO,OAAO,GAAG,EAAd;;AACA,WAAOhD,KAAK,CAACzB,kBAAN,CAAyBsD,MAAhC,EAAwC;AACpC,UAAIU,GAAG,GAAGvC,KAAK,CAACzB,kBAAN,CAAyB0E,KAAzB,EAAV;;AACA,UAAIV,GAAJ,EAAS;AACL7B,uBAAQC,GAAR,CAAY,uBAAuB4B,GAAG,CAACxD,IAA3B,GAAkC,GAA9C;;AACA,YAAIwD,GAAG,CAACW,KAAJ,EAAJ,EAAiB;AACbxC,yBAAQC,GAAR,CAAY,0CAAZ;;AACAX,UAAAA,KAAK,CAAC1B,OAAN,CAAc4B,IAAd,CAAmBqC,GAAnB;AACH,SAHD,MAIK;AACDS,UAAAA,OAAO,CAAC9C,IAAR,CAAaqC,GAAb;;AACA7B,yBAAQC,GAAR,CAAY,eAAZ;AACH;AACJ;AACJ;;AACDX,IAAAA,KAAK,CAACzB,kBAAN,CAAyB2B,IAAzB,CAA8B,GAAG8C,OAAjC;AACH,GAnGoB;;AAoGrBD,EAAAA,sBAAsB,CAACR,GAAD,EAAMf,IAAN,EAAY;AAC9B,QAAIA,IAAI,CAACmB,MAAL,IAAe,OAAOnB,IAAI,CAACmB,MAAZ,IAAsB,QAAzC,EAAmD;AAC/CjC,qBAAQC,GAAR,CAAY,qBAAqBa,IAAI,CAACmB,MAAtC;;AACAJ,MAAAA,GAAG,CAACY,SAAJ,CAAc3B,IAAI,CAACmB,MAAnB;AACH;;AACD,QAAInB,IAAI,CAACzC,IAAL,IAAa,OAAOyC,IAAI,CAACzC,IAAZ,IAAoB,QAArC,EAA+C;AAC3C2B,qBAAQC,GAAR,CAAY,mBAAmBa,IAAI,CAACzC,IAApC;;AACAwD,MAAAA,GAAG,CAACa,OAAJ,CAAY5B,IAAI,CAACzC,IAAjB;AACH;;AACD,QAAIyC,IAAI,CAACkB,WAAL,IAAoB,OAAOlB,IAAI,CAACkB,WAAZ,IAA2B,QAAnD,EAA6D;AACzDhC,qBAAQC,GAAR,CAAY,0BAA0Ba,IAAI,CAACkB,WAA3C;;AACAH,MAAAA,GAAG,CAACc,cAAJ,CAAmB7B,IAAI,CAACkB,WAAxB;AACH;;AACD,QAAIlB,IAAI,CAAC8B,cAAL,CAAoB,SAApB,KAAkC,OAAO9B,IAAI,CAACoB,OAAZ,IAAuB,QAA7D,EAAuE;AACnElC,qBAAQC,GAAR,CAAY,sBAAsBa,IAAI,CAACoB,OAAvC;;AACAL,MAAAA,GAAG,CAACgB,UAAJ,CAAeC,MAAM,CAACC,QAAP,CAAgBjC,IAAI,CAACoB,OAArB,CAAf;AACH;;AACD,QAAIpB,IAAI,CAAC8B,cAAL,CAAoB,MAApB,KAA+B,OAAO9B,IAAI,CAACqB,IAAZ,IAAoB,QAAvD,EAAiE;AAC7DnC,qBAAQC,GAAR,CAAY,4BAA4Ba,IAAI,CAACqB,IAA7C;;AACAN,MAAAA,GAAG,CAACmB,OAAJ,CAAYC,QAAZ,CAAqBzB,OAArB,CAA8B0B,GAAD,IAASA,GAAG,CAACC,gBAAJ,CAAqBrC,IAAI,CAACqB,IAA1B,CAAtC;AACH;;AACD,QAAIrB,IAAI,CAACsB,WAAL,IAAoB,OAAOtB,IAAI,CAACsB,WAAZ,IAA2B,QAAnD,EAA6D;AACzDpC,qBAAQC,GAAR,CAAY,+BAA+Ba,IAAI,CAACsB,WAAhD;;AACA,UAAItB,IAAI,CAACsB,WAAL,CAAiBgB,WAAjB,MAAkC,MAAlC,IACAtC,IAAI,CAACsB,WAAL,CAAiBgB,WAAjB,MAAkC,KADtC,EAC6C;AACzCvB,QAAAA,GAAG,CAACmB,OAAJ,CAAYC,QAAZ,CAAqBzB,OAArB,CAA6B6B,GAAG,IAAIA,GAAG,CAACC,aAAJ,CAAkBxC,IAAI,CAACsB,WAAvB,CAApC;AACH;AACJ;AACJ,GAhIoB;;AAiIrB9B,EAAAA,cAAc,CAACV,IAAD,EAAON,KAAP,EAAcwB,IAAd,EAAoB;AAC9B,SAAKyC,gBAAL,CAAsB3D,IAAtB,EAA4BN,KAA5B,EAAmCwB,IAAnC,EAAyCrE,IAAI,CAAC+G,KAAL,CAAW5D,IAAI,CAAC1B,IAAhB,CAAzC,EAAgE3B,yBAAcE,IAA9E;AACH,GAnIoB;;AAoIrB8D,EAAAA,aAAa,CAACX,IAAD,EAAON,KAAP,EAAcwB,IAAd,EAAoB;AAC7B,SAAKyC,gBAAL,CAAsB3D,IAAtB,EAA4BN,KAA5B,EAAmCwB,IAAnC,EAAyC,0BAAUlB,IAAI,CAAC1B,IAAf,EAAqB;AAAEuF,MAAAA,gBAAgB,EAAE;AAApB,KAArB,CAAzC,EAA4FlH,yBAAcG,GAA1G;AACH,GAtIoB;;AAuIrB8D,EAAAA,aAAa,CAACZ,IAAD,EAAON,KAAP,EAAcwB,IAAd,EAAoB;AAC7Bd,mBAAQC,GAAR,CAAY,wBAAwBL,IAAI,CAACzB,QAA7B,GAAwC,GAApD;;AACArB,uBAAU0G,KAAV,CAAgB/G,IAAI,CAAC+G,KAAL,CAAW5D,IAAI,CAAC1B,IAAhB,CAAhB,EAAuC0B,IAAI,CAACzB,QAA5C,EAAsDmB,KAAtD,EAA6DwB,IAA7D;AACH,GA1IoB;;AA2IrBL,EAAAA,aAAa,CAACb,IAAD,EAAON,KAAP,EAAcwB,IAAd,EAAoB;AAC7Bd,mBAAQC,GAAR,CAAY,uBAAuBL,IAAI,CAACzB,QAA5B,GAAuC,GAAnD;;AACAjB,uBAAUsG,KAAV,CAAgBE,IAAI,CAACF,KAAL,CAAW5D,IAAI,CAAC1B,IAAhB,CAAhB,EAAuC0B,IAAI,CAACzB,QAA5C,EAAsDmB,KAAtD,EAA6DwB,IAA7D;AACH,GA9IoB;;AA+IrBJ,EAAAA,gBAAgB,CAACd,IAAD,EAAON,KAAP,EAAcwB,IAAd,EAAoB;AAChCd,mBAAQC,GAAR,CAAY,0BAA0BL,IAAI,CAACzB,QAA/B,GAA0C,GAAtD;;AACAhB,0BAAaqG,KAAb,CAAmB5D,IAAnB,EAAyBA,IAAI,CAACzB,QAA9B,EAAwCmB,KAAxC,EAA+CwB,IAA/C;AACH,GAlJoB;;AAmJrBH,EAAAA,sBAAsB,CAACf,IAAD,EAAON,KAAP,EAAcwB,IAAd,EAAoB;AACtCd,mBAAQC,GAAR,CAAY,uCAAuCL,IAAI,CAACzB,QAA5C,GAAuD,GAAnE;;AACAf,+BAAkBoG,KAAlB,CAAwB5D,IAAxB,EAA8BA,IAAI,CAACzB,QAAnC,EAA6CmB,KAA7C,EAAoDwB,IAApD;AACH,GAtJoB;;AAuJrByC,EAAAA,gBAAgB,CAAC3D,IAAD,EAAON,KAAP,EAAcwB,IAAd,EAAoB6C,GAApB,EAAyBhC,cAAzB,EAAyC;AACrD,QAAIiC,cAAc,GAAG,EAArB;;AACA,SAAK,IAAI1C,MAAT,IAAmBrE,OAAnB,EAA4B;AACxB,UAAIqE,MAAM,CAACS,cAAP,OAA4BA,cAA5B,IAA8CT,MAAM,CAAC2C,IAAP,CAAYF,GAAZ,CAAlD,EACIC,cAAc,CAACpE,IAAf,CAAoB0B,MAApB;AACP;;AACDlB,mBAAQC,GAAR,CAAY,cAAcL,IAAI,CAACzB,QAAnB,GAA8B,UAA9B,GAA2CyF,cAAc,CAACE,GAAf,CAAmBC,CAAC,IAAIA,CAAC,CAACxC,OAAF,KAAc,UAAtC,CAAvD;;AACAqC,IAAAA,cAAc,CAACpC,OAAf,CAAuBwC,MAAM,IAAIA,MAAM,CAACR,KAAP,CAAaG,GAAb,EAAkB/D,IAAI,CAACzB,QAAvB,EAAiCmB,KAAjC,EAAwCwB,IAAxC,CAAjC;AACH;;AA/JoB,CAAlB","sourcesContent":["import { ContainerType } from './ADCFormat';\nimport { Logger as console } from './Logger';\nimport { parse as parse_xml } from 'fast-xml-parser';\nimport * as Papa from 'papaparse';\nimport AmbidecodeCoefs from './AmbidecodeCoefs';\nimport AmbidecodeSettings from './AmbidecodeSettings';\nimport IEMFormat from './IEMFormat';\nimport ADDFormat from './ADDFormat';\nimport CSVFormat from './CSVFormat';\nimport AmbdecFormat from './AmbdecFormat';\nimport AmbixConfigFormat from './AmbixConfigFormat';\nfunction containerTypeToString(ty) {\n    switch (ty) {\n        case ContainerType.CSV:\n            return \"csv\";\n        case ContainerType.JSON:\n            return \"json\";\n        case ContainerType.XML:\n            return \"xml\";\n        case ContainerType.AMBDEC:\n            return \"ambdec\";\n        case ContainerType.CONFIG:\n            return \"config\";\n    }\n}\nlet formats = [\n    ADDFormat,\n    AmbidecodeCoefs,\n    AmbidecodeSettings,\n    IEMFormat,\n    CSVFormat,\n    AmbdecFormat,\n    AmbixConfigFormat\n];\nexport var ParserMessageLevels;\n(function (ParserMessageLevels) {\n    ParserMessageLevels[ParserMessageLevels[\"note\"] = 0] = \"note\";\n    ParserMessageLevels[ParserMessageLevels[\"warn\"] = 1] = \"warn\";\n    ParserMessageLevels[ParserMessageLevels[\"err\"] = 2] = \"err\";\n})(ParserMessageLevels || (ParserMessageLevels = {}));\nexport class ParserMessage {\n    constructor(mess, level) {\n        this.message = mess;\n        this.level = level;\n    }\n}\nexport class ParseResults {\n    constructor() {\n        this.results = [];\n        this.incomplete_results = [];\n        this.messages = [];\n        this.output_files = [];\n    }\n}\nexport class ConvertableTextFile {\n    constructor(fname, data) {\n        this.filename = fname;\n        this.data = data;\n    }\n}\nexport class ConverterOption {\n    constructor(name, value) {\n        this.used = false;\n        this.name = name;\n        this.value = value;\n    }\n    type() { return typeof this.value; }\n    peek() { return this.value; }\n    wasUsed() { return this.used; }\n    use() {\n        this.used = true;\n        return this.value;\n    }\n}\nexport class ConverterOptions {\n    constructor(...args) {\n        this.options = [];\n        this.options = args;\n    }\n    has(name) {\n        return this.options.find(opt => opt.name === name) != undefined;\n    }\n    get(name) {\n        return this.options.find(opt => opt.name === name);\n    }\n    use(name) {\n        let opt = this.get(name);\n        if (opt)\n            return opt.use();\n    }\n    getUnused() {\n        return this.options.reduce((carry, current) => {\n            !current.used ? carry.push(current) : null;\n            return carry;\n        }, []);\n    }\n}\nexport const Converter = {\n    convert_string(files, options) {\n        let results = new ParseResults();\n        for (let file of files) {\n            let ftype = file.filename.slice((file.filename.lastIndexOf(\".\") - 1 >>> 0) + 2);\n            console.log(\"Processing file: \" + file.filename);\n            console.log(\"Filetype:        \" + ftype);\n            if (!(ftype === 'xml'\n                || ftype === 'json'\n                || ftype === 'add')) {\n                if (file.data.charAt(0) === '<')\n                    ftype = 'xml';\n                else if (file.data.charAt(0) === '{' || file.data.charAt(0) === '[')\n                    ftype = 'json';\n            }\n            file.filename = file.filename.replace(/^.*[\\\\\\/]/, '').split('.').slice(0, -1).join('.');\n            switch (ftype) {\n                case 'json':\n                    this._do_parse_json(file, results, options);\n                    break;\n                case 'xml':\n                    this._do_parse_xml(file, results, options);\n                    break;\n                case 'add':\n                    this._do_parse_add(file, results, options);\n                    break;\n                case 'csv':\n                    this._do_parse_csv(file, results, options);\n                    break;\n                case 'ambdec':\n                    this._do_parse_ambdec(file, results, options);\n                    break;\n                case 'config':\n                    this._do_parse_ambix_config(file, results, options);\n                    break;\n            }\n        }\n        console.log(\"Applying command line options\");\n        this._do_apply_options(results, options);\n        this._do_convert(results, options);\n        return results;\n    },\n    _do_convert(carry, opts) {\n        let ofopt = opts.use('format');\n        let output = opts.use('output');\n        let fileext = \"\", format;\n        if (output)\n            fileext = output.slice((output.lastIndexOf(\".\") - 1 >>> 0) + 2);\n        if (ofopt)\n            format = ofopt;\n        else if (fileext.length)\n            format = fileext;\n        else\n            format = 'add';\n        let converter = formats.find(frm => frm.shortName() == format);\n        if (converter) {\n            console.log(\"Using '\" + converter.getName() + \"' exporter\");\n            carry.results.forEach(res => {\n                let data = converter.fromADD(res, opts);\n                console.log(\"Producing output: '\" + res.name + \"', format: '\" + format + \"', container: \" + containerTypeToString(converter.container_type()));\n                carry.output_files.push({\n                    name: res.name,\n                    format: format,\n                    container: containerTypeToString(converter.container_type()),\n                    data: data,\n                    add: res\n                });\n            });\n        }\n        else\n            throw new Error(\"Exporter '\" + format + \"' not found\");\n    },\n    _do_apply_options(carry, opts) {\n        let mopts = {\n            description: opts.use('description'),\n            name: opts.use('name'),\n            author: opts.use('author'),\n            version: opts.use('version'),\n            norm: opts.use('norm'),\n            renormalize: opts.use('reNorm'),\n        };\n        carry.results.forEach(res => this._do_apply_options_impl(res, mopts));\n        carry.incomplete_results.forEach(res => this._do_apply_options_impl(res, mopts));\n        let restash = [];\n        while (carry.incomplete_results.length) {\n            let add = carry.incomplete_results.shift();\n            if (add) {\n                console.log(\"reevaluating ADD '\" + add.name + \"'\");\n                if (add.valid()) {\n                    console.log(\"is valid now, appending to valid results\");\n                    carry.results.push(add);\n                }\n                else {\n                    restash.push(add);\n                    console.log(\"still invalid\");\n                }\n            }\n        }\n        carry.incomplete_results.push(...restash);\n    },\n    _do_apply_options_impl(add, opts) {\n        if (opts.author && typeof opts.author == 'string') {\n            console.log(\"setting author: \" + opts.author);\n            add.setAuthor(opts.author);\n        }\n        if (opts.name && typeof opts.name == 'string') {\n            console.log(\"setting name: \" + opts.name);\n            add.setName(opts.name);\n        }\n        if (opts.description && typeof opts.description == 'string') {\n            console.log(\"setting description: \" + opts.description);\n            add.setDescription(opts.description);\n        }\n        if (opts.hasOwnProperty('version') && typeof opts.version == 'number') {\n            console.log(\"setting version: \" + opts.version);\n            add.setVersion(Number.parseInt(opts.version));\n        }\n        if (opts.hasOwnProperty('norm') && typeof opts.norm == 'string') {\n            console.log(\"setting normalisation: \" + opts.norm);\n            add.decoder.matrices.forEach((dec) => dec.setNormalization(opts.norm));\n        }\n        if (opts.renormalize && typeof opts.renormalize == 'string') {\n            console.log(\"renormalizing matrices to \" + opts.renormalize);\n            if (opts.renormalize.toLowerCase() == 'sn3d' ||\n                opts.renormalize.toLowerCase() == 'n3d') {\n                add.decoder.matrices.forEach(mat => mat.renormalizeTo(opts.renormalize));\n            }\n        }\n    },\n    _do_parse_json(file, carry, opts) {\n        this._do_parse_native(file, carry, opts, JSON.parse(file.data), ContainerType.JSON);\n    },\n    _do_parse_xml(file, carry, opts) {\n        this._do_parse_native(file, carry, opts, parse_xml(file.data, { ignoreAttributes: false }), ContainerType.XML);\n    },\n    _do_parse_add(file, carry, opts) {\n        console.log(\"Loading .add file '\" + file.filename + \"'\");\n        ADDFormat.parse(JSON.parse(file.data), file.filename, carry, opts);\n    },\n    _do_parse_csv(file, carry, opts) {\n        console.log(\"Parsing CSV file '\" + file.filename + \"'\");\n        CSVFormat.parse(Papa.parse(file.data), file.filename, carry, opts);\n    },\n    _do_parse_ambdec(file, carry, opts) {\n        console.log(\"Parsing ambdec file '\" + file.filename + \"'\");\n        AmbdecFormat.parse(file, file.filename, carry, opts);\n    },\n    _do_parse_ambix_config(file, carry, opts) {\n        console.log(\"Parsing AmbiX configuration file '\" + file.filename + \"'\");\n        AmbixConfigFormat.parse(file, file.filename, carry, opts);\n    },\n    _do_parse_native(file, carry, opts, obj, container_type) {\n        let parsers_to_try = [];\n        for (let format of formats) {\n            if (format.container_type() === container_type && format.test(obj))\n                parsers_to_try.push(format);\n        }\n        console.log(\"Parsing '\" + file.filename + \"' with '\" + parsers_to_try.map(p => p.getName() + \"' parser\"));\n        parsers_to_try.forEach(parser => parser.parse(obj, file.filename, carry, opts));\n    }\n};\n"],"file":"Converter.js"}