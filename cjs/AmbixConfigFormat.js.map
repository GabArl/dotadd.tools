{"version":3,"sources":["../build/AmbixConfigFormat.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","AmbixConfigFormat","shortName","getName","getDescription","container_type","ContainerType","CONFIG","test","obj","parse","file","filename","carry","options","console","log","data","fromADD","add","opts"],"mappings":";;;;;;;AAMA;;AANA,IAAIA,UAAU,GAAI,UAAQ,SAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,OAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD,IAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAC7E,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAOA,IAAIQ,iBAAiB,GAAG,MAAMA,iBAAN,CAAwB;AAC5C,SAAOC,SAAP,GAAmB;AACf,WAAO,OAAP;AACH;AACD;;;;;AAGA,SAAOC,OAAP,GAAiB;AACb,WAAO,2BAAP;AACH;AACD;;;;;AAGA,SAAOC,cAAP,GAAwB;AACpB,WAAO,wFAAP;AACH;AACD;;;;;AAGA,SAAOC,cAAP,GAAwB;AACpB,WAAOC,yBAAcC,MAArB;AACH;AACD;;;;;;AAIA,SAAOC,IAAP,CAAYC,GAAZ,EAAiB;AACb,WAAO,KAAP;AACH;AACD;;;;;;;;;AAOA,SAAOC,KAAP,CAAaC,IAAb,EAAmBC,QAAnB,EAA6BC,KAA7B,EAAoCC,OAApC,EAA6C;AACzCC,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACM,IAAjB;AACH;;AACD,SAAOC,OAAP,CAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACtB,WAAO,EAAP;AACH;;AAzC2C,CAAhD;AA2CAnB,iBAAiB,GAAGhB,UAAU,CAAC,CAC3B,oCAD2B,CAAD,EAE3BgB,iBAF2B,CAA9B;eAGeA,iB;;AACf","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ContainerType, _static_implements } from \"./ADCFormat\";\nlet AmbixConfigFormat = class AmbixConfigFormat {\n    static shortName() {\n        return \"ambix\";\n    }\n    /**\n     * @returns {string} the name of the format\n     */\n    static getName() {\n        return \"AmbiX Configuration Files\";\n    }\n    /**\n     * @returns {string} a string describing the format\n     */\n    static getDescription() {\n        return \"Read and write configurations files for the AmbiX Plugin Suite by Matthias Kronlachner\";\n    }\n    /**\n     * @returns {ContainerType} the container type for this format\n     */\n    static container_type() {\n        return ContainerType.CONFIG;\n    }\n    /**\n     * test if an object can be interpreted by this format\n     * @param obj object to test\n     */\n    static test(obj) {\n        return false;\n    }\n    /**\n     * parse the format\n     * @param obj object to parse\n     * @param filename filename of the parsed object\n     * @param carry carried from the last iteration if the parser needs/accepts more than one file\n     * @param options converter options\n     */\n    static parse(file, filename, carry, options) {\n        console.log(file.data);\n    }\n    static fromADD(add, opts) {\n        return \"\";\n    }\n};\nAmbixConfigFormat = __decorate([\n    _static_implements()\n], AmbixConfigFormat);\nexport default AmbixConfigFormat;\n;\n"],"file":"AmbixConfigFormat.js"}