{"version":3,"sources":["../build/AmbixConfigFormat.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","ParserState","AmbixConf","constructor","debug_msg","coef_scale","coef_seq","cflip","cflop","cflap","dec_mat_gain","invert_condon_shortley","coefs","AmbixConfigFormat","shortName","getName","getDescription","container_type","ContainerType","CONFIG","test","obj","parse","file","filename","carry","options","add","ADD","ambix","lines","ambixRemoveComments","data","split","pstate","DEFAULT","forEach","line","ambixReadLine","toLowerCase","ParseError","ambixDecApplyOptions","ambixDecFillZeroes","setName","setDescription","addMatrix","Matrix","setAuthor","createDefaultMetadata","createDefaultOutputs","addMakeImags","valid","results","push","incomplete_results","fromADD","opts","out","ambixWriteLine","Date","now","toISOString","ambixWriteNewlines","ambixWriteBlockBegin","ambixWriteValue","name","decoder","matrices","normalization","ambixWriteBlockEnd","ambixWriteDec","matrix","max_s","reduce","len","row","state","GLOBAL","ambixReadGlobalValue","DEC_MAT","ambixReadDecoderRow","HRTF_SECT","ambixReadHrtfSection","ambixReadDefault","includes","map","str","Number","parseFloat","vals","shift","join","parseInt","trim","is_nul","coef","output","summing_matrix","fill","flip","flop","flap","total","flipp","flapp","flopp","cshortley","m","ACN","index","l","order","Math","pow","coeffs","ch","value"],"mappings":"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","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ContainerType, _static_implements } from \"./ADCFormat\";\nimport { ADD, ACN, Matrix } from 'dotadd.js';\nimport { ParseError } from \"./Util\";\nvar ParserState;\n(function (ParserState) {\n    ParserState[ParserState[\"GLOBAL\"] = 0] = \"GLOBAL\";\n    ParserState[ParserState[\"HRTF_SECT\"] = 1] = \"HRTF_SECT\";\n    ParserState[ParserState[\"DEC_MAT\"] = 2] = \"DEC_MAT\";\n    ParserState[ParserState[\"DEFAULT\"] = 3] = \"DEFAULT\";\n})(ParserState || (ParserState = {}));\nclass AmbixConf {\n    constructor() {\n        this.debug_msg = \"\";\n        this.coef_scale = \"\";\n        this.coef_seq = \"\";\n        this.cflip = 0;\n        this.cflop = 0;\n        this.cflap = 0;\n        this.dec_mat_gain = 1.;\n        this.invert_condon_shortley = false;\n        this.coefs = [];\n    }\n}\nlet AmbixConfigFormat = class AmbixConfigFormat {\n    static shortName() {\n        return \"config\";\n    }\n    /**\n     * @returns {string} the name of the format\n     */\n    static getName() {\n        return \"AmbiX Configuration Files\";\n    }\n    /**\n     * @returns {string} a string describing the format\n     */\n    static getDescription() {\n        return \"Read and write configurations files for the AmbiX Plugin Suite by Matthias Kronlachner\";\n    }\n    /**\n     * @returns {ContainerType} the container type for this format\n     */\n    static container_type() {\n        return ContainerType.CONFIG;\n    }\n    /**\n     * test if an object can be interpreted by this format\n     * @param obj object to test\n     */\n    static test(obj) {\n        return false;\n    }\n    /**\n     * parse the format\n     * @param obj object to parse\n     * @param filename filename of the parsed object\n     * @param carry carried from the last iteration if the parser needs/accepts more than one file\n     * @param options converter options\n     */\n    static parse(file, filename, carry, options) {\n        let add = new ADD();\n        let ambix = new AmbixConf();\n        let lines = ambixRemoveComments(file.data.split('\\n'));\n        let pstate = ParserState.DEFAULT;\n        lines.forEach(line => pstate = ambixReadLine(ambix, line, pstate));\n        if (!(ambix.coef_scale.toLowerCase() === 'sn3d'\n            || ambix.coef_scale.toLowerCase() === 'n3d'))\n            throw new ParseError(filename + '.config', \"Unexpected normalization: '\" + ambix.coef_scale + \"'\");\n        ambixDecApplyOptions(ambix);\n        ambixDecFillZeroes(ambix);\n        add.setName((ambix.debug_msg.length) ? ambix.debug_msg : filename);\n        add.setDescription(\"Parsed from ambix decoder configuration file / \" + \"filename\" + \".config\");\n        add.addMatrix(new Matrix(ambix.coef_scale, ambix.coefs));\n        add.setAuthor(\"Matthias Kronlachner feat. the dotaddtool creators\");\n        add.createDefaultMetadata();\n        add.createDefaultOutputs();\n        addMakeImags(add);\n        if (add.valid())\n            carry.results.push(add);\n        else\n            carry.incomplete_results.push(add);\n    }\n    static fromADD(add, opts) {\n        let out = { data: \"\" };\n        ambixWriteLine(out, \"// created with the dotaddtool - \" + new Date(Date.now()).toISOString());\n        ambixWriteNewlines(out, 2);\n        ambixWriteBlockBegin(out, \"GLOBAL\");\n        ambixWriteValue(out, \"debug_msg\", add.name);\n        ambixWriteValue(out, \"coeff_scale\", add.decoder.matrices[add.decoder.matrices.length - 1].normalization);\n        ambixWriteValue(out, \"coeff_seq\", \"acn\");\n        ambixWriteValue(out, \"dec_mat_gain\", \"1.000\");\n        ambixWriteBlockEnd(out);\n        ambixWriteNewlines(out, 2);\n        ambixWriteBlockBegin(out, \"HRTF\");\n        ambixWriteBlockEnd(out);\n        ambixWriteNewlines(out, 2);\n        ambixWriteDec(out, add.decoder.matrices[add.decoder.matrices.length - 1].matrix);\n        ambixWriteNewlines(out, 1);\n        return out.data;\n    }\n};\nAmbixConfigFormat = __decorate([\n    _static_implements()\n], AmbixConfigFormat);\nexport default AmbixConfigFormat;\n;\nfunction ambixDecFillZeroes(ambix) {\n    let max_s = ambix.coefs\n        .reduce((len, row) => ((len > row.length) ? len : row.length), 0);\n    ambix.coefs.forEach(row => {\n        while (!(row.length === max_s))\n            row.push(0);\n    });\n}\nfunction ambixReadLine(ambix, line, state) {\n    switch (state) {\n        case ParserState.GLOBAL:\n            return ambixReadGlobalValue(ambix, line);\n        case ParserState.DEC_MAT:\n            return ambixReadDecoderRow(ambix, line);\n        case ParserState.HRTF_SECT:\n            return ambixReadHrtfSection(ambix, line);\n        default:\n            return ambixReadDefault(ambix, line);\n    }\n}\nfunction ambixReadDefault(ambix, line) {\n    if (line.includes(\"#GLOBAL\"))\n        return ParserState.GLOBAL;\n    if (line.includes(\"#HRTF\"))\n        return ParserState.HRTF_SECT;\n    if (line.includes(\"#DECODERMATRIX\"))\n        return ParserState.DEC_MAT;\n    return ParserState.DEFAULT;\n}\nfunction ambixReadHrtfSection(ambix, line) {\n    if (line.includes(\"#END\"))\n        return ParserState.DEFAULT;\n    return ParserState.HRTF_SECT;\n}\nfunction ambixReadDecoderRow(ambix, line) {\n    if (line.includes(\"#END\"))\n        return ParserState.DEFAULT;\n    let coefs = line.split(/\\s+/).map(str => Number.parseFloat(str));\n    ambix.coefs.push(coefs);\n    return ParserState.DEC_MAT;\n}\nfunction ambixReadGlobalValue(ambix, line) {\n    if (line.includes(\"#END\"))\n        return ParserState.DEFAULT;\n    let vals = line.split(/\\s+/);\n    switch (vals.shift()) {\n        case '/debug_msg':\n            ambix.debug_msg = vals.join(\" \");\n        case '/coeff_scale':\n            ambix.coef_scale = vals.shift();\n        case '/coeff_seq':\n            ambix.coef_seq = vals.shift();\n        case '/flip':\n            ambix.cflip = Number.parseInt(vals.shift());\n        case '/flap':\n            ambix.cflap = Number.parseInt(vals.shift());\n        case '/flop':\n            ambix.cflop = Number.parseInt(vals.shift());\n        case '/dec_mat_gain':\n            ambix.dec_mat_gain = Number.parseFloat(vals.shift());\n        case '/invert_condon_shortley':\n            ambix.invert_condon_shortley = Number.parseInt(vals.shift()) === 1;\n    }\n    return ParserState.GLOBAL;\n}\nfunction ambixRemoveComments(lines) {\n    return lines.map(line => { return line.split(\"//\")[0].trim(); });\n}\nfunction addMakeImags(add) {\n    add.decoder.matrices[0].matrix.forEach((row, i) => {\n        if (row.reduce((is_nul, coef) => is_nul && (coef == 0), true))\n            add.decoder.output.summing_matrix[i].fill(0);\n    });\n}\nfunction ambixDecApplyOptions(ambix) {\n    let flip = 1, flop = 1, flap = 1, total = 1;\n    let flipp = ambix.cflip === 1;\n    let flapp = ambix.cflap === 1;\n    let flopp = ambix.cflop === 1;\n    let cshortley = ambix.invert_condon_shortley;\n    if (cshortley || flipp || flapp || flopp) {\n        ambix.coefs.forEach(row => {\n            row.forEach((coef, i) => {\n                let m = ACN.index(i);\n                let l = ACN.order(i);\n                // this section is copied 1::1 from the kronlachner plugins code\n                if (flipp && (m < 0)) // m < 0 -> invert\n                    flip = -1;\n                if (flopp && (((m < 0) && !(m % 2)) || ((m >= 0) && (m % 2)))) // m < 0 and even || m >= 0 and odd ()\n                    flop = -1;\n                if (flapp && ((l + m) % 2)) // l+m odd   ( (odd, even) or (even, odd) )\n                    flap = -1;\n                if (cshortley)\n                    total = Math.pow(-1, i) * flip * flop * flap;\n                else\n                    total = flip * flop * flap;\n                row[i] = coef * total;\n            });\n        });\n    }\n}\nfunction ambixWriteDec(out, coeffs) {\n    ambixWriteBlockBegin(out, \"DECODERMATRIX\");\n    coeffs.forEach(ch => {\n        ambixWriteLine(out, ch.join(\"\\t\"));\n    });\n    ambixWriteBlockEnd(out);\n}\nfunction ambixWriteBlockBegin(out, name) {\n    ambixWriteLine(out, `#${name}`);\n}\nfunction ambixWriteBlockEnd(out) {\n    ambixWriteLine(out, \"#END\");\n}\nfunction ambixWriteValue(out, name, value) {\n    ambixWriteLine(out, `/${name}\\t ${value}`);\n}\nfunction ambixWriteLine(out, line) {\n    out.data = out.data + line + \"\\n\";\n}\nfunction ambixWriteNewlines(out, lines) {\n    for (let i = 0; i < lines; ++i)\n        out.data = out.data + \"\\n\";\n}\n"],"file":"AmbixConfigFormat.js"}